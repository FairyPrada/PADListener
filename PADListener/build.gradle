buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:0.10.0+'
	}
}

apply plugin: 'android'
apply plugin: 'maven'

repositories {
	mavenCentral()
}

dependencies {
	compile fileTree(dir: 'libs', include: '*.jar')
	//compile "com.android.support:support-v4:18.0.+"
	//compile 'org.apache.commons:commons-lang3:3.3.2'
	//compile 'commons-io:commons-io:2.4'
	compile project(':SandroProxyLib')
}

android {
	compileSdkVersion 15
	buildToolsVersion "19.1"
	
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			java.srcDirs = ['src']
			resources.srcDirs = ['src']
			aidl.srcDirs = ['src']
			renderscript.srcDirs = ['src']
			res.srcDirs = ['res']
			assets.srcDirs = ['assets']
			jniLibs.srcDirs = ['libs']
		}
		instrumentTest.setRoot('tests')
	}
	
	productFlavors {
		arm {
			ndk {
				abiFilter "armeabi"
			}
		}
	}
	
	lintOptions {
		abortOnError false
	}
	
	packagingOptions {
		exclude 'META-INF/DEPENDENCIES.txt'
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/DEPENDENCIES'
		exclude 'META-INF/notice.txt'
		exclude 'META-INF/license.txt'
		exclude 'META-INF/dependencies.txt'
		exclude 'META-INF/LGPL2.1'
	}
	
	
	String signingPropsFilePath = null
	if(project.hasProperty("signingProperties.path") && new File(project.property("signingProperties.path")).exists()) {
		signingPropsFilePath = project.property("signingProperties.path")
	} else if(System.getenv("SIGNING_PROPERTIES_PATH") != null && new File(System.getenv("SIGNING_PROPERTIES_PATH")).exists()) {
		signingPropsFilePath = System.getenv("SIGNING_PROPERTIES_PATH")
	}
	
	if(signingPropsFilePath != null) {
		Properties signingProps = new Properties()
		signingProps.load(new FileInputStream(file(signingPropsFilePath)))
		
		signingConfigs {
			release {
				storeFile file(signingProps['signing.release.storeFile'])
				storePassword signingProps['signing.release.storePassword']
				keyAlias signingProps['signing.release.keyAlias']
				keyPassword signingProps['signing.release.keyPassword']
			}
		}
		
		buildTypes {
			release {
				runProguard false
				signingConfig signingConfigs.release
			}
		}
	}
}

artifacts {  
    archives file('build/apk/PADListener-release.apk')
}

String uploadPropsFilePath = null
if(project.hasProperty("uploadProperties.path") && new File(project.property("uploadProperties.path")).exists()) {
	uploadPropsFilePath = project.property("uploadProperties.path")
} else if(System.getenv("UPLOAD_PROPERTIES_PATH") != null && new File(System.getenv("UPLOAD_PROPERTIES_PATH")).exists()) {
	uploadPropsFilePath = System.getenv("UPLOAD_PROPERTIES_PATH")
}

if(uploadPropsFilePath != null) {
	Properties uploadProps = new Properties()
	uploadProps.load(new FileInputStream(file(uploadPropsFilePath)))
	
	uploadArchives {  
		repositories {  
			mavenDeployer {  
				repository(url: uploadProps['repo.release.url']) {  
					authentication(userName: uploadProps['repo.release.userName'], password: uploadProps['repo.release.password']);  
				}  
				snapshotRepository(url: uploadProps['repo.snapshot.url']) {
					authentication(userName: uploadProps['repo.snapshot.userName'], password: uploadProps['repo.snapshot.password']);  
				}
				pom.groupId = 'fr.neraud'
				pom.artifactId = 'PADListener'
				pom.version = manifestVersionName()
			}  
		}  
	}
}

def manifestVersionName() {
	def manifestFile = file(project.projectDir.absolutePath + '/AndroidManifest.xml')
	def ns = new groovy.xml.Namespace("http://schemas.android.com/apk/res/android", "android")
	def xml = new XmlParser().parse(manifestFile)
	return xml.attributes()[ns.versionName].toString()
}
